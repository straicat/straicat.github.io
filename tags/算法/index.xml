<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>算法 on 木然轩</title><link>https://muranxuan.top/tags/%E7%AE%97%E6%B3%95/</link><description>Recent content in 算法 on 木然轩</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 04 Apr 2019 21:20:00 +0800</lastBuildDate><atom:link href="https://muranxuan.top/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml"/><item><title>简单又不简单的二分法</title><link>https://muranxuan.top/p/7tr7k/</link><pubDate>Thu, 04 Apr 2019 21:20:00 +0800</pubDate><guid>https://muranxuan.top/p/7tr7k/</guid><description>二分法的思路比较简单，但往往不容易写对，比如要不要加等号、死循环等问题。实际上，二分法就是一个逐步缩小范围的过程，每次缩小一半。 经典应用 最经</description></item><item><title>快速幂取余算法</title><link>https://muranxuan.top/p/7tbs7/</link><pubDate>Fri, 22 Mar 2019 00:07:00 +0800</pubDate><guid>https://muranxuan.top/p/7tbs7/</guid><description>计算a的b次方模m： $$ a^b\ %\ m $$ 暴力的做法是将a乘b次，最后对m取模。不过，这样可能导致溢出，时间复杂度也很高。 现在考虑，求3的10次方，最少</description></item><item><title>并查集初步</title><link>https://muranxuan.top/p/7ta3x/</link><pubDate>Wed, 20 Mar 2019 11:57:31 +0800</pubDate><guid>https://muranxuan.top/p/7ta3x/</guid><description>引言 有若干节点，并将其中一些节点对进行连接，要判断任意两个节点是否连通（有路径到达，而不要求直接连接），连通后就不会断开连通关系，此时就可以</description></item><item><title>N-sum问题通解</title><link>https://muranxuan.top/p/7qvfi/</link><pubDate>Tue, 01 Jan 2019 11:42:00 +0800</pubDate><guid>https://muranxuan.top/p/7qvfi/</guid><description>N-sum 问题还是比较典型的，这里进行一下小结。 首先描述一下 N-sum 问题：有一个数组 nums，要求从数组中选择 n 个数，使得这些数的和恰好为 target ，输出所有不重</description></item><item><title>求单链表交点</title><link>https://muranxuan.top/p/7qhfm/</link><pubDate>Wed, 19 Dec 2018 21:22:00 +0800</pubDate><guid>https://muranxuan.top/p/7qhfm/</guid><description>题目 今天面试时，面试官问了这样一个问题：两个单链表相交，怎么求交点。所谓相交，就是两个节点的next指针相同。 简单解法 一个简单的思路是：分别</description></item><item><title>栈和队列——算法笔记</title><link>https://muranxuan.top/p/7d4wx/</link><pubDate>Fri, 13 Oct 2017 10:09:00 +0800</pubDate><guid>https://muranxuan.top/p/7d4wx/</guid><description>链表 链表可以方便地实现以下操作： 从表头添加元素 1 2 3 4 Node tmp = front; front = new Node(); front.value = item; // item为添加的元素 front.next = tmp; 考虑边界情况，当链表为空添加元素时的</description></item></channel></rss>